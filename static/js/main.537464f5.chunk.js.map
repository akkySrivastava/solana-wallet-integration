{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","network","WalletAdapterNetwork","Devnet","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getTorusWallet","options","clientId","getLedgerWallet","getBloctoWallet","getSolletWallet","getSolletExtensionWallet","getMathWallet","getCoin98Wallet","getBitpieWallet","getSafePalWallet","getSolflareWebWallet","getSolongWallet","connection","useConnection","useWallet","publicKey","sendTransaction","useCallback","a","WalletNotConnectedError","transaction","Transaction","add","SystemProgram","transfer","fromPubkey","toPubkey","Keypair","generate","lamports","signature","confirmTransaction","className","autoConnect","logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"orBA6GeA,MArEf,WAEE,IAAMC,EAAUC,uBAAqBC,OAG/BC,EAAWC,mBAAQ,kBAAMC,wBAAcL,KAAU,CAACA,IAIlDM,EAAUF,mBACd,iBAAM,CACJG,cACAC,cACAC,cACAC,YAAe,CACbC,QAAS,CACPC,SACE,6FAGNC,cACAC,YAAgB,CAAEd,YAClBe,YAAgB,CAAEf,YAClBgB,YAAyB,CAAEhB,YAC3BiB,cACAC,cACAC,cACAC,cACAC,cACAC,iBAEF,CAACtB,IAGKuB,EAAeC,cAAfD,WACR,EAAuCE,cAA/BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,gBAiBnB,OAfgBC,sBAAW,sBAAC,8BAAAC,EAAA,yDACrBH,EADqB,sBACJ,IAAII,0BADA,cAGpBC,GAAc,IAAIC,eAAcC,IACpCC,gBAAcC,SAAS,CACrBC,WAAYV,EACZW,SAAUC,UAAQC,WAAWb,UAC7Bc,SAAU,KAPY,SAWFb,EAAgBI,EAAaR,GAX3B,cAWpBkB,EAXoB,gBAapBlB,EAAWmB,mBAAmBD,EAAW,aAbrB,2CAczB,CAACf,EAAWC,EAAiBJ,IAE9B,qBAAKoB,UAAU,MAAf,SACE,cAAC,IAAD,CAAoBxC,SAAUA,EAA9B,SACE,cAAC,IAAD,CAAgBG,QAASA,EAASsC,aAAW,EAA7C,SACE,eAAC,IAAD,CAAqBC,KAAK,6EAA1B,UACE,cAAC,IAAD,IACA,cAAC,IAAD,cCtFGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.537464f5.chunk.js","sourcesContent":["import \"./App.css\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n  useConnection,\n  useWallet,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  WalletAdapterNetwork,\n  WalletNotConnectedError,\n} from \"@solana/wallet-adapter-base\";\nimport {\n  getBloctoWallet,\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n  getTorusWallet,\n  getMathWallet,\n  getCoin98Wallet,\n  getBitpieWallet,\n  getSafePalWallet,\n  getSolflareWebWallet,\n  getSolongWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport {\n  WalletModalProvider,\n  WalletDisconnectButton,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-react-ui\";\nimport {\n  clusterApiUrl,\n  Keypair,\n  SystemProgram,\n  Transaction,\n} from \"@solana/web3.js\";\nimport React, { useMemo, useCallback } from \"react\";\n\nfunction App() {\n  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n  const network = WalletAdapterNetwork.Devnet;\n\n  // You can also provide a custom RPC endpoint\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you configure here will be compiled into your application\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getTorusWallet({\n        options: {\n          clientId:\n            \"BFtJ4A7RZJ-S7wOPqtmMXxqv3c7bwauL7K4xyRhy6_T8sjGbW5vzjvAtWFt1SAyD2ivdMquSH4ulD0BkJrHKYYc\",\n        },\n      }),\n      getLedgerWallet(),\n      getBloctoWallet({ network }),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n      getMathWallet(),\n      getCoin98Wallet(),\n      getBitpieWallet(),\n      getSafePalWallet(),\n      getSolflareWebWallet(),\n      getSolongWallet(),\n    ],\n    [network]\n  );\n\n  const { connection } = useConnection();\n  const { publicKey, sendTransaction } = useWallet();\n\n  const onClick = useCallback(async () => {\n    if (!publicKey) throw new WalletNotConnectedError();\n\n    const transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: publicKey,\n        toPubkey: Keypair.generate().publicKey,\n        lamports: 1,\n      })\n    );\n\n    const signature = await sendTransaction(transaction, connection);\n\n    await connection.confirmTransaction(signature, \"processed\");\n  }, [publicKey, sendTransaction, connection]);\n  return (\n    <div className=\"App\">\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletModalProvider logo=\"http://dev.marketplace.nightlifecoins.com/favicon/android-icon-192x192.png\">\n            <WalletMultiButton />\n            <WalletDisconnectButton />\n          </WalletModalProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n      {/* <button onClick={onClick} disabled={!publicKey}>\n        Send 1 lamport to a random address!\n      </button> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}